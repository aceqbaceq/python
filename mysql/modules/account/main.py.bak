#!/usr/bin/python

import sys
import module_account
import datetime
import mysql.connector
import collections


#
# set inital variabes
#

i_min=50000             # min account_id
module_name = "main"
DB_Host="localhost"
DB_User="root"
DB_Password="rootpass"
DB_Name="db2"
DB_Port="3306"
bad_account_id=[
4005556,
4005550,
4005544,
4005538,
4005533,
3992314,
3992313,
3990514,
3990507,
3990501,
3990494,
3990489,
3990482,
3990472,
3989891,
3989890,
3989883,
3896752,
3896751,
3072203,
3026365,
2719223,
2682160,
2678435,
2661899,
2661588,
2640027,
2630711,
2630525,
2630359,
2630345,
2630222,
2630208,
2630145,
2630132,
2629869,
2291738,
2255326,
2255212,
2255165,
2061990,
1955250,
1955249,
1946305,
1938712,
1928827,
1651887,
1651886,
1646097,
1646096
]  # bad_account_id == accounts that intersect payment_gateway table






#
# Step 0 | set mysql connection
#

mydb = mysql.connector.connect(
                                host = DB_Host,
                                user = DB_User,
                                password = DB_Password,
                                database = DB_Name,
                                port = DB_Port
                              )


mycursor = mydb.cursor()







#
# step 1 |  account (account_id)
#
# find max(accoun_id)
A_table = "account"
query = ("SELECT SQL_NO_CACHE max(account_id)  FROM `%s`;")  %(A_table,)
mycursor.execute(query,)
myresult = mycursor.fetchall()

l = 0     
for x in myresult:
   l = len(myresult)
if l == 0:
   print colored("file %s | ERROR: | 'account_id' is not found, please specify another 'initial_account_id'. \n or doc_date = NULL ", 'red') % (__file__)
   sys.exit(1)

else: 
  i_max=x[0]





#
# step 2 | launch loop
#

# kostyl
i_max=1919712

i=i_max
while i >= i_min:

  from datetime import datetime
  now = datetime.now()
  current_time = now.strftime("%H:%M:%S")
  from datetime import date
  today = date.today()
  sys.stdout.write("current account_id: %s,   time=%s, date=%s   \r" % (i,current_time,today) )
  sys.stdout.flush()


  # check if i do not intersect bad_accout_id list
  result = collections.Counter([i]) & collections.Counter(bad_account_id)
  if len(result) != 0:
     i-=1
     continue


  m = module_account.account(  initial_account_id=i,
                         DB_Host=DB_Host,
                         DB_User=DB_User,
                         DB_Password=DB_Password,
                         DB_Name=DB_Name,
                         DB_Port=DB_Port )
  if m == 10:
    print " module %s | module account returned error \"payment gateway detected\" | skip account_id = %s " % (module_name, i)
  i -=1

print ""
